#version 440 core

layout (local_size_x = 32, local_size_y = 32) in;
layout (binding = 0, rgba32f) uniform image2D outputImage;
layout (binding = 1, rgba32f) uniform imageBuffer spheres;

struct Ray
{
	vec3 origin;
	vec3 direction;
};

struct Sphere
{
	vec3 center;
	float radius;
};

float intersectRaySphere(Ray ray,Sphere sphere, out vec3 hitPosition, out vec3 normal)
{
	vec3 rayToSphere = ray.origin - sphere.center;
	float a = dot(ray.direction, ray.direction);
	float b = 2.0 * dot(ray.direction, rayToSphere);
	float c = dot(rayToSphere,rayToSphere) - sphere.radius * sphere.radius;
	float b2 = b*b;

	float f = b2 - 4.0 * a * c;

	if(f < 0.0) return 0.0;

	float q = (b > 0.0) ? -0.5 * b + sqrt(f) : -0.5 * b - sqrt(f);

	float t0 = q/a;
	float t1 = c/q;

	float t = min(max(t0, 0.0), max(t1,0.0))*0.5;

	if(t == 0.0) return 0.0;

	hitPosition = ray.origin + t * ray.direction;
	normal = normalize(hitPosition - sphere.center);

	return t;
}


void main(){
   //uvec3 invocation = gl_LocalInvocationID; // index of the shader invocation within the local work group
   //uvec3 workGroupSize = gl_WorkGroupSize; // the local work group size
   //uvec3 numWorkGroups = gl_NumWorkGroups; // the number of global work groups 
   //uvec3 workGroupId = gl_WorkGroupID;//the index of the current work group within the global set
   //uvec3 globalInvocationId = gl_GlobalInvocationID; //the number of invocations in the global set
   //uint index = gl_LocationInvocationIndex; //gl_LocalInvocationID flattened for indexing buffers

    Ray ray;

	ray.origin = vec3(1.0);
	vec2 size = vec2(imageSize(outputImage));
	float u = gl_GlobalInvocationID.x / size.x;
	float v = gl_GlobalInvocationID.y /  size.y;
	
	vec3 leftCorner = vec3(-2.0,-1.0,-1.0);
	vec3 horizontal = vec3(4.0,0.0,0.0);
	vec3 vertical = vec3(0.0,2.0,0.0);
	
	ray.direction = leftCorner + u * horizontal + v * vertical;
	

	
	vec3 diffuseColor = vec3(0.5,0.3,0.7);
	vec3 lightPosition = vec3(-0.5,0,0);
	//for(int i = 0; i < 10; i++) {
		vec4 sphereInfo = imageLoad(spheres, 9);
		//vec4 pixelColor = imageLoad(outputImage, ivec2(gl_GlobalInvocationID.xy));
		
		Sphere sphere;
		sphere.center = sphereInfo.xyz;
		sphere.radius = sphereInfo.w;
		
		vec3 hitPosition, normal;

		float t = intersectRaySphere(ray,sphere, hitPosition, normal);
	
		vec4 outColor;
	
		if(t != 0.0f) {
			vec3 lightDirection = normalize(hitPosition - lightPosition);
			float lightDotNormal = dot(lightDirection, normal);
	
			vec3 color = diffuseColor * lightDotNormal;
	
			outColor= vec4(color,1.0);
			//imageStore(outputImage, ivec2(gl_GlobalInvocationID.xy), outColor);
			imageStore(outputImage, ivec2(gl_GlobalInvocationID.xy), vec4(diffuseColor * lightDotNormal,1));
		}
		else{
			imageStore(outputImage, ivec2(gl_GlobalInvocationID.xy), vec4(1,.4,.6,1));
		}
	//}
}
